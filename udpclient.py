import socket
import hashlib
import time 

msgFromClient = "Hello UDP Server" # Initial message to server to tell the server the client is ready

bytesToSend = str.encode(msgFromClient)  # Convert string to bytes

serverAddressPort = ("172.17.0.2", 20001) # Set server IP address and port number

bufferSize = 65535 # Set to 65535 in order to receive large amount of packets

def checksum(packet): # Calculate checksum
    return hashlib.md5(packet).digest() # Return checksum

# Create a UDP socket at client side
UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)

# Send to server using created UDP socket
UDPClientSocket.sendto(bytesToSend, serverAddressPort)

start_time = time.time() # Start timing for duration calculation on report

try:
    while True: # If transmission is not over
        msgFromServer = UDPClientSocket.recvfrom(bufferSize) # Receive packet from server
        packet = msgFromServer[0] # Get packet from server
        
        if packet == "EOT".encode(): # If packet is EOT
            end_time = time.time() # End timing for duration calculation on report
            print(f"Transmission ended. Duration: {end_time - start_time} seconds") # Print duration for report 
            break
        
        checksum_length = 16 # Size of checksum generated by md5 library
        seq_num = int(packet[:4]) # Get sequence number from packet its first 4 bytes

        received_checksum = packet[-16:] # Get checksum from packet its last 16 bytes
        received_data = packet[:-16] # get data from packet except last 16 bytes

        calculated_checksum = checksum(received_data) # Calculate checksum for received data
        if calculated_checksum != received_checksum: # If checksums do not match
            continue
        ack_msg = f"{seq_num:04}".encode() # Create ACK message with sequence number with 4 bytes
        UDPClientSocket.sendto(ack_msg, serverAddressPort) # Send ACK message to server


except KeyboardInterrupt: # Handles ctrl + c
    print("Interrupted") # Prints interrup on terminal
finally: 
    UDPClientSocket.close() # Close socket after transmission finished